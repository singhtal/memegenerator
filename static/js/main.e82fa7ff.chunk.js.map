{"version":3,"sources":["actions/secrets.js","actions/index.js","Memeitem.js","Mymemes.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["username","password","RECEIVE_MEMES","NEW_MEME","Memeitem","state","hovered","this","props","text0","text1","meme_obj","template_id","meme","id","createMeme","className","onMouseEnter","setState","onMouseLeave","onClick","postMeme","src","url","alt","name","Component","connect","new_meme_object","dispatch","params","bodyParams","Object","keys","map","key","encodeURIComponent","join","console","log","fetch","method","headers","body","then","response","json","postMemeJson","new_meme","type","Mymemes","myMemes","index","data","App","memeLimit","Form","inline","FormGroup","FormLabel","FormControl","onChange","event","target","value","memes","slice","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","subscribe","getState","memesjson","receiveMemes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e82fa7ff.chunk.js","sourcesContent":["const username = 'tal007';\r\nconst password = '7838020998';\r\n\r\nexport {username, password};","import {username, password} from './secrets';\r\n\r\nexport const RECEIVE_MEMES = 'RECEIVE_MEMES';\r\nexport const NEW_MEME = 'NEW_MEME';\r\n\r\nfunction receiveMemes(memesjson){\r\n    const memes = memesjson.data.memes;\r\n    return {\r\n        type: RECEIVE_MEMES,\r\n        memes\r\n    }\r\n}\r\n\r\nfunction fetchMemesJson(){\r\n    return fetch('https://api.imgflip.com/get_memes')\r\n    .then(response => response.json())\r\n}\r\n\r\nexport function fetchMemes(){\r\n    return function(dispatch){\r\n        return fetchMemesJson()\r\n        .then(json => dispatch(receiveMemes(json)));\r\n    }\r\n}\r\n\r\nexport function newMeme(meme){\r\n    return {\r\n        type: NEW_MEME,\r\n        meme\r\n    }\r\n}\r\n\r\nexport function postMemeJson(params){\r\n    params[\"username\"] =  username;\r\n    params[\"password\"] =  password;\r\n\r\n    const bodyParams = Object.keys(params).map(key => {\r\n        return encodeURIComponent(key) + \"=\" +  encodeURIComponent(params[key]);\r\n    }).join('&');\r\n\r\n    console.log('bp', bodyParams);\r\n\r\n    return fetch('https://api.imgflip.com/caption_image',{\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: bodyParams\r\n    })\r\n    .then(response => response.json())\r\n}\r\n\r\nexport function createMeme(new_meme_object){\r\n    return function(dispatch){\r\n        return postMemeJson(new_meme_object)\r\n        .then(new_meme => dispatch(newMeme(new_meme)));\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {createMeme} from './actions';\r\nimport {connect} from 'react-redux';\r\n\r\nclass Memeitem extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            hovered: false\r\n        }\r\n    }\r\n    postMeme(){\r\n        const {text0, text1} = this.props;\r\n\r\n        const meme_obj = {\r\n            template_id : this.props.meme.id,\r\n            text0, \r\n            text1\r\n        }\r\n\r\n        this.props.createMeme(meme_obj);\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"meme-item\"\r\n                onMouseEnter={() => this.setState({hovered: true})}\r\n                onMouseLeave={() => this.setState({hovered: false})}\r\n                onClick={() => this.postMeme()}\r\n            >\r\n                <img \r\n                src={this.props.meme.url}\r\n                alt={this.props.meme.name}\r\n                className={this.state.hovered === true ? \"meme-image darken-image\" : \"meme-image\"}\r\n                ></img>\r\n                <p className={this.state.hovered === true ? \"meme-text\" : \"no-text\"}>{this.props.meme.name}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, {createMeme})(Memeitem);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nclass Mymemes extends Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                {\r\n                    this.props.myMemes.map((meme, index) => {\r\n                        return(\r\n                            <img key={index} src={meme.data.url} alt=\"my-meme\" className=\"my-meme-image\"/>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return state;\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Mymemes);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport { Form, FormGroup, FormControl, FormLabel } from 'react-bootstrap';\nimport './App.css';\nimport Memeitem from './Memeitem';\nimport Mymemes from './Mymemes';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state ={\n      memeLimit: 10,\n      text0: '',\n      text1: ''\n    }\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <h2><u>Welcome to the Meme Generator !</u></h2>\n        <Mymemes></Mymemes>\n        <h4><i>Write Some Text</i></h4>\n\n        <Form inline>\n\n          <FormGroup>\n            <FormLabel>Top</FormLabel>\n              {' '}\n            <FormControl type=\"text\" onChange={(event) => this.setState({text0: event.target.value})}></FormControl>\n          \n          </FormGroup>\n\n          <FormGroup>\n            <FormLabel>Bottom</FormLabel>\n              {' '}\n            <FormControl type=\"text\" onChange={(event) => this.setState({text1: event.target.value})}></FormControl>\n          \n          </FormGroup>\n\n        </Form>\n\n        {this.props.memes.slice(0, this.state.memeLimit).map((meme, index) => {\n          return(\n            \n            <Memeitem key={index} meme={meme} text0={this.state.text0} text1={this.state.text1}></Memeitem>\n          )\n        })\n        }\n        <div className=\"meme-btn\" onClick={() => this.setState({memeLimit: this.state.memeLimit + 10})}>\n          Load 10 more memes...\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state){\n  return state;\n}\n\nexport default connect(mapStateToProps, null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { RECEIVE_MEMES, NEW_MEME } from '../actions/index';\r\nimport {combineReducers} from 'redux';\r\n\r\nfunction memes(state=[], action){\r\n    switch(action.type){\r\n        case RECEIVE_MEMES:\r\n            return action.memes;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction myMemes(state=[], action){\r\n    switch(action.type){\r\n        case NEW_MEME:\r\n            state = [...state, action.meme];\r\n            return state;\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({memes, myMemes});\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\n\nimport {fetchMemes} from './actions';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nstore.subscribe(() => console.log('sub',store.getState()));\n\nstore.dispatch(fetchMemes());\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}